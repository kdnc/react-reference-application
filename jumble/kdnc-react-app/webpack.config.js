const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: path.join(__dirname,'src','index.js'),
  output: {
    path: path.join(__dirname,'build'),
    filename: 'index.bundle.js'
  },
  devtool: 'inline-source-map',
  devServer: {
    hot: true
  },
  module: {
    rules: [
      {
        // this is so that we can compile any React,
        // ES6 and above into normal ES5 syntax
        test: /\.(js|jsx)$/,
        // we do not want anything from node_modules to be compiled
        exclude: /node_modules/,
        use: {
          loader: "babel-loader"
        }
      },
      {
        test: /\.(css|scss)$/, // or any file that has filename matching with the regular expression specified in the 'test' property, first use ‘css-loader’ to compile those and then use ‘style-loader’ on the output of css-loader. Note, the order in which webpack applies loaders on the matching resources is from last to first.
        use: [
          "style-loader", // style-loader would take the output string generated by the above css-loader and put it inside the <style> tags in the index.html file.
          "css-loader", // css-loader is the npm module that would help webpack to collect CSS from all the css files referenced in your application and put it into a string.
          "sass-loader" // compiles Sass to CSS, using Node Sass by default
        ]
      }
    ]
  },
  mode: process.env.NODE_ENV || 'development',
  resolve: {
    modules: [path.resolve(__dirname, 'src'), 'node_modules']
  },
  devServer: {
    contentBase: path.join(__dirname,'src')
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(__dirname,'public','index.html')
    }),
    new webpack.HotModuleReplacementPlugin()
  ]
};